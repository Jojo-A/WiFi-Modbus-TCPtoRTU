#include "..\h\RtuMaster.h"
#include "..\h\trace.h"
extern cTcpTrace trace;

RtuMaster::RtuMaster()
{
  Serial.begin(115200);
}

RtuMaster::~RtuMaster()
{
}

uint16_t RtuMaster::calculateCRC(uint8_t * buff, uint16_t len)
{
  uint16_t temp, temp2, flag;
  temp = 0xFFFF;
  for (uint16_t i = 0; i < len; i++)
  {
    temp = temp ^ *(buff +i);
    for (uint8_t j = 1; j <= 8; j++)
    {
      flag = temp & 0x0001;
      temp >>= 1;
      if (flag)
        temp ^= 0xA001;
    }
  }
  return temp;
}


void RtuMaster::task()
{
  static uint16_t status = 0; //

  switch(status)
  {
    case 0: // Отправка пакета
    {
      cTcpSlave::smbFrame * pmbFrame = TcpSlave.getReadyToSendRtuBuffer();
      if(pmbFrame)
      {
      //  trace.print ("Send pack. CRC  ");
        uint16_t crcFrame = CRC16(pmbFrame->buffer + 6, (pmbFrame->len) - 6 );
        //trace.print (crcFrame);
        *((pmbFrame->buffer) + (pmbFrame->len) +1)    = (uint8_t) (crcFrame >> 8);
        *((pmbFrame->buffer) + (pmbFrame->len) +0) = (uint8_t)  (crcFrame & 0xFF);
        size_t len = (pmbFrame->len) + 2;
        size_t count = 6;
        while (count < len)
          Serial.write((uint8_t)*(pmbFrame->buffer + (count++)));
        pmbFrame->status = cTcpSlave::frameStatus::waitFromRtu;
      //  trace.println (String(" Status: ") + String(status) +
      //   String("Len: ") + String((pmbFrame->len)-4) );
        pmbFrame->millis   = millis();
        status = 1;

      }
      break;
    }
    case 1: // Ожидане ответа
    {
      cTcpSlave::smbFrame * pmbFrame = TcpSlave.getWaitFromRtuBuffer();
      if (pmbFrame)
      {
        if (Serial.available())
          {
            pmbFrame->millis   = millis();
            pmbFrame->len = 6;
            status = 2;
          }
      }
      else
        status = 0;
      break;
    }
    case 2: // чтение ответа
    {
      cTcpSlave::smbFrame * pmbFrame = TcpSlave.getWaitFromRtuBuffer();
      if (pmbFrame)
      {
        if (Serial.available())
          {
            pmbFrame->millis = millis();
            while(Serial.available())
            {
              if (pmbFrame->len <= RTU_BUFFER_SIZE)
              {
              *(pmbFrame->buffer + pmbFrame->len) =  Serial.read();
                pmbFrame->len ++;
              }
            }
          }
        else
          if (millis() - pmbFrame->millis > 2)
          {
              uint16_t crcFrame = CRC16(pmbFrame->buffer + 6, (pmbFrame->len) - 6 );
              if (!crcFrame)
              {
                pmbFrame->len -= 2;
                *(pmbFrame->buffer + 5) = (uint8_t) pmbFrame->len-6;
                pmbFrame->status = cTcpSlave::frameStatus::readyToSendTcp;
              }
              else
              {
                status = 0;
                pmbFrame->status = cTcpSlave::frameStatus::empty;
                while(Serial.available()) Serial.read();
              }
          }
      }
      else
        status = 0;
      break;
    }
  }
}

//Расчет CRC16
uint16_t RtuMaster::CRC16(uint8_t *puchMsg, uint16_t usDataLen)
{
const uint8_t auchCRCHi[] = {
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
		0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
		0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
		0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
		0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
		0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
		0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
		0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
		0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
		0x40
	} ;
const uint8_t auchCRCLo[] = {
		0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
		0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
		0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
		0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
		0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
		0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
		0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
		0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
		0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
		0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
		0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
		0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
		0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
		0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
		0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
		0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
		0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
		0x40	};



		uint8_t uIndex;
		uint8_t uchCRCHi = 0xFF;
		uint8_t uchCRCLo = 0xFF;

		while (usDataLen--)
		{
			uIndex = uchCRCLo ^ *puchMsg++;
 			uchCRCLo = uchCRCHi  ^ auchCRCHi[uIndex];
			uchCRCHi = auchCRCLo[uIndex] ;
 		}
		return ((uchCRCHi * 0x100 )| uchCRCLo);
	}


RtuMaster _RtuMaster;

//void RtuMaster::sendPacket(unsigned char bufferSize)
//{
//  for (unsigned char i = 0; i < bufferSize; i++) {
//    Serial.write(_frame[i]);
//  }
//  Serial.flush();
//  // allow a _frame delay to indicate end of transmission
//  delayMicroseconds(T3_5);
//}

// get the serial data from the buffer
//Status::RtuError RtuMaster::getData()
//{
//  unsigned int index = 0;
//  unsigned char overflowFlag = 0;

//  while (Serial.available())
//  {
    // The maximum number of bytes is limited to the serial buffer size of 128 bytes
    // If more bytes is received than the BUFFER_SIZE the overflow flag will be set and the
    // serial buffer will be red untill all the data is cleared from the receive buffer,
    // while the slave is still responding.
//    if (overflowFlag)
//      Serial.read();
//    else
//    {
//      if (index == RTU_BUFFER_SIZE) {
//        overflowFlag = 1;
//      }
//      _frame[index] = Serial.read();
//      index++;
//    }

//    delayMicroseconds(T1_5); // inter character time out
//  }

  // The minimum buffer size from a slave can be an exception response of 5 bytes
  // If the buffer was partialy filled clear the buffer.
  // The maximum number of bytes in a modbus packet is 256 bytes.
  // The serial buffer limits this to 128 bytes.
  // If the buffer overflows than clear the buffer and set
  // a packet error.
//  if ((index > 0 && index < 5) || overflowFlag)
//  {
//    index = 0;
//    trace.println ("Read from serial port Error");
//    return Status::buffer_errors;
//  }
//  trace.println ("Read from serial port OK");
//  return index == 0 ? Status::nothing : Status::ok;
//}
